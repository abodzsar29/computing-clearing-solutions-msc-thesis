Welcome!

This file contains the instructions to the Computing Clearing Solutions in Financial Networks project by Andrew Bodzsar, as required by the 
Individual Project module for the MSc Computational Finance course at King's College London. This project aims to implement a financial network with the 
possiblity to apply 2 algorithms onto it and compare their effects on the overall equity and debt in the network, as well as the amount of 
nodes that are "alive" and the amount of nodes that have defaulted post application. The first one is a clearing algorithm by Eisenberg & Noe,
and the other one is a compression algorithm from Schuldenzucker & Seuken.

The Run Simulation button on the bottom left of the GUI runs a simulation which clears the network of debts and measures the metrics
described above, then resets the network to its original state and runs the compression algorithm followed by the clearing algorithm, and
again notes down the above metrics. This process is run on 10 different graphs from initiation to its finish. The metrics are then
displayed on the console for each of the 10 tests, as well as their average.

------------------------------------------------------------------------------------------------------------------
How to run the program:

To run the program, open the main.py file in an interpreter, or run it directly from the command prompt. The project
was developed in PyCharm.

The dependencies you will require are:
- pip install tkinter
- pip install matplotlib
- pip install networkx
- pip install pandas


------------------------------------------------------------------------------------------------------------------
Further information about the program:

Running will open a Tkinter GUI. You will now see a network in front of you, with the red/green circles each representing
a financial entity. The ID is the number of the node in the network. The "Equity:" text on the node shows how much equity the 
node currently has (the owed amounts from other nodes are not counted in this sum). The "Debt:" text on the node shows how
much overall debt the node currently owes to other nodes. The "Defaulted:" text on the bottom row is just an indicator, it
says "True" if the node has more debt than equity and is in a defaulted state, and it is coloured Red in this case. 
It shows "False" if the node has more equity than debt and is coloured Green in this case. 

The statistics on the bottom of the GUI show the total equity available in the network, the total debt in the network,
the number of defaulted nodes currently seen in the network, the number of survived nodes currently seen in the network and
whether a Pareto improvement has taken place after the EisenbergNoe button was pressed.

The tail of the arrows between the nodes show the debtor in a financial obligation, whilst the arrow points at the creditor.
Double headed arrows show a reciprocal debt.

------------------------------------------------------------------------------------------------------------------
Instructions to clear, compress, reset the network, attain new graph or run simulation:

To clear the debts in the network until every node has nullified its equity and defaulted, or paid off all of their
obligations, press the EisenbergNoe button on the bottom left of the GUI. This will apply the Eisenberg & Noe clearing
algorithm.

To simplify the recpiprocal debts in the network, press the Compression button on the bottom left of the GUI. This will
apply the Schuldenzucker & Seuken algorithm and you will notice that the double headed arrows get reduced to unidirectional
arrows.

The Quit button closes the GUI and stops the running of the program.

The Reset button resets the graph to its original state, with the original values that were shown right after the current
graph generated for the first time.

The NewGraph button will provide a completely new graph and update the statistics on the bottom of the screen.

The Run Simulation button will repeat the following process 10 times and note down specific metrics:
Run the clearing algorithm, reset the network, compress the network, run the clearing algorithm, generate new graph
It will then print the summary of the current simulation to the console, as well as the contents of the Excel file. This
Excel file contains the averages of the 10 runs from each simulation, hence 1 row in the file will contain 10 simulations
worth of averaged data. 

"EN Change in Debt" is the overall change in the amount of debt in the network from its generation to post-clearing.
"EN Survived Nodes Change" is the overall change in the number of nodes that have "False" as their Defaulted status post clearing.
"EN Defaulted Nodes Change" is the overall change in the number of nodes that have True" as their Defaulted status post clearing.
"EN Pareto Improvement" displays No if Pareto improvement did not take place during clearing. Displays "Yes" if it did take place.

"Compression+EN Change in Debt" is the overall change in the amount of debt in the network from its generation to post-compression and post-clearing.
"Compression+EN Survived Nodes Change" is the overall change in the number of nodes that have "False" as their Defaulted status post compression and clearing.
"Compression+EN Defaulted Nodes Change" is the overall change in the number of nodes that have True" as their Defaulted status post compression and clearing.
"Compression+EN Pareto Improvement" displays No if Pareto improvement did not take place during compression and clearing. Displays "Yes" if it did take place.



